# NOTE: This file is auto generated by OpenAPI Generator 6.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule RefinitivWorldCheckOneAPI.Api.Mediacheck do
  @moduledoc """
  API calls for all endpoints tagged `Mediacheck`.
  """

  alias RefinitivWorldCheckOneAPI.Connection
  import RefinitivWorldCheckOneAPI.RequestBuilder

  @doc """
  Attach articles to a case.
  Attach articles to a case identified by the given caseSystemId.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for the Case.
  - `article_attachment` (ResultsMediaCheckResolutionRequest): Articles attachment.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec attach_articles(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse.t} | {:error, Tesla.Env.t}
  def attach_articles(connection, authorization, date, content_type, content_length, case_system_id, article_attachment, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cases/#{case_system_id}/mediacheck/results/attach")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, article_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Detach single article from a case.
  Detach single article from a case identified by the given caseSystemId.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for the Case.
  - `article_id` (String.t): MediaCheck news article ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec detach_article(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def detach_article(connection, authorization, date, case_system_id, article_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/cases/#{case_system_id}/mediacheck/results/#{article_id}/attach")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Detach articles from a case.
  Detach articles from a case identified by the given caseSystemId.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for the Case.
  - `article_detachment` (MediaCheckDetachArticlesRequest): Articles detachment.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec detach_articles(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.MediaCheckDetachArticlesRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse.t} | {:error, Tesla.Env.t}
  def detach_articles(connection, authorization, date, content_type, content_length, case_system_id, article_detachment, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/cases/#{case_system_id}/mediacheck/results/attach")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, article_detachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.ResultsMediaCheckResolutionResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Disable smart filter on a case
  Update the smart filter state on the case provided in the request path. The group setting \"Allow users to enable/disable the Smart Filter\" should be equal to true to have the ability to update the smart filter state on the case. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. If the smart filter has already disabled then the smart filter status will not be updated. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_smart_filter_on_case(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def disable_smart_filter_on_case(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Enable smart filter on a case
  Update the smart filter state on the case provided in the request path. The group setting \"Allow users to enable/disable the Smart Filter\" should be equal to true to have the ability to update the smart filter state on the case. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. If the smart filter has already enabled then the smart filter status will not be updated. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_smart_filter_on_case(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def enable_smart_filter_on_case(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve article metadata by the article IDs
  Retrieve Media Check headlines results by the article IDs.  **Example HTTP request**  ```     {       \"articleIds\":[         \"articleID1\",         \"articleID2\",         \"articleID3\"       ]     } ``` 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for the Case
  - `metadata_request` (MediaCheckArticlesMetadataRequest): Collection of Article IDs.
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): A value that identifies UI language for request. The response will be provided in the selected UI language where available, otherwise it will be returned in English.

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_articles_metadata(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t} | {:error, Tesla.Env.t}
  def get_media_check_articles_metadata(connection, authorization, date, content_type, content_length, case_system_id, metadata_request, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/cases/#{case_system_id}/mediacheck/results/metadata")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, metadata_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve MediaCheck results
  Retrieve MediaCheck headlines results by the case ID.  The retrieval of MediaCheck headlines results may require a number of steps depending on the size of the headline result set.  1. Initially the API consumer does basic search of MediaCheck news articles by specifying initial filters and facets to return. 2. Later the API consumer may invoke the endpoint several times in order to scroll the results page by page or to narrow down the results by selecting specific facet values.  Initial search request usually contains:   * `pagination` object with specified fields `itemsPerPage` and `sort`, while the field `pageReference` is not specified. It is possible not to specify the `pagination` object at all, in this case WC1-API will use the default pagination values.  * `facets` object contains list of facet categories to return.  * `drilldownKeys` is empty on initial search.  * `archivedArticles` field set as `true` within the `baseFilter` object (see explanation below).  The `archivedArticles` field previously within the `baseFilter` object is deprecated and should not be used in future development work.  Additionally, you may also limit publication dates through `publicationDate` field within `baseFilter` object.  The sample initial search request below specifies search within Media Check news articles according to the *Archive limit* of the *Media Check* Group settings issued in 2017, and requests up to 10 `geography` facet values, and a default number of `topic` facet values:  ```     {       \"baseFilter\": {         \"smartFilter\": true         \"reviewRequiredArticles\": true,         \"archivedArticles\": true,         \"publicationDate\": {           \"min\": \"2017-01-01T00:00:00.000Z\",           \"max\": \"2018-01-01T00:00:00.000Z\"         }       },       \"facets\": {         \"geography\": {           \"limit\": 10         },         \"topic\": {}       },       \"pagination\": {         \"itemsPerPage\": 25,         \"sort\": \"NEW_TO_OLD\"       }     } ```  For example, consider the response returns a total result count of 100 articles, displaying 25 headlines per page. In order to retrieve the second page results, the one should include `pageReferences` field (the 26-50 news articles), or for the last page results (the 76-100 news articles).  There are also facet values for requested `geographies` and `topics` facets, as well as `matchingEntities` values because search request has `\"smartFilter\": true`.  ```     {       \"totalResultCount\": 100,       \"results\": [...25 items in the array...],       \"pageReferences\": {         \"last\": \"tokenLastPage\",         \"next\": \"tokenSecondPage\"       },       \"facets\": {         \"geographies\": [           {             \"drilldownKey\": \"drillDownKeyUK\",             \"facetLabel\": \"United Kingdom\",             \"articleCount\": \"56\"           }         ],         \"topics\": [           {             \"drilldownKey\": \"drillDownKeyFraud\",             \"facetLabel\": \"Fraud\",             \"articleCount\": \"43\"           }         ],         \"matchingEntities\": [           {             \"drilldownKey\": \"drillDownKeyDonald\",             \"facetLabel\": \"DONALD DUCK\",             \"articleCount\": \"20\",             \"matchStrength\": \"1\"           }         ]       }     } ```  The second page results are only possible to be viewed after retrieving the first page of the headline result set. The next and subsequent pages results can be retrieved in a similar way, but additionally the request should include the `pageReference` field within the pagination object. For better performance there's no need to provide `facets` object while requesting the second page.  ```     {       \"pagination\": {         \"pageReference\": \"tokenSecondPage\"       },       \"baseFilter\": {         \"archivedArticles\": true,         \"reviewRequiredArticles\": true,         \"publicationDate\": {           \"max\": \"2017-01-01T00:00:00.000Z\",           \"min\": \"2017-12-31T23:59:59.999Z\"         }       }     } ```  Alternatively, it is possible to narrow down results to the \"United Kingdom\" and \"Fraud\" topics instead of scrolling over huge number of results. The example request looks like the initial search with the list of `drilldownKeys`.  ```     {       \"pagination\": {         \"itemsPerPage\": 25,         \"sort\": \"NEW_TO_OLD\"       },       \"baseFilter\": {         \"archivedArticles\": true,         \"reviewRequiredArticles\": true,         \"publicationDate\": {           \"max\": \"2017-01-01T00:00:00.000Z\",           \"min\": \"2017-12-31T23:59:59.999Z\"         }       },       \"facets\": {...},       \"drilldownKeys\": [         \"drillDownKeyFraud\",         \"drillDownKeyUK\"       ]     } ```  **Note on articles count display**: With deduplication on, the total articles count is returned, including duplicates, if any. The duplicate articles are returned in the `duplicatesKey` field. The API user can use this field in the [Retrieve MediaCheck Article Duplicates](#_retrievemediacheckduplicates) endpoint to view the article duplicates.  *For example*, consider the following request:  ```   {     \"baseFilter\": {       \"archivedArticles\": true,       \"reviewRequiredArticles\": true     },     \"pagination\": {       \"itemsPerPage\": 25,       \"sort\": \"NEW_TO_OLD\"     }   } ```  If the deduplication is on, the API user may recieve a response containing the `duplicatesKey`:  ```   {     ...     \"results\": [       {         ...         \"articleSummary\": {           ...           \"duplicatesKey\": \"someDuplicatedKeyHash\",           ...         }       },       ...     ],     ...     \"totalResultCount\": 10550,     ...   } ```  Then the value of the received `duplicatesKey` may be used in [MediaCheckDuplicatesRequest](#MediaCheckDuplicatesRequest):  ```   {     \"deduplicationHash\": \"someDuplicatedKeyHash\"   } ```  Afterwards the API user will get the response containing duplicated articles:  ```   {     \"duplicates\": [       \"articleId\": \"someArticleId\",       ...     ]   } ``` 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for a Case.
  - `request` (MediaCheckResultsRequest): A request to retrieve the news results. 
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): A value that identifies GUI language for the request. The response will be provided in the selected GUI language where available, otherwise it will be returned in English. Note this cannot be used to filter content by language and is used to display localized metadata.

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_details(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsResponse.t} | {:error, Tesla.Env.t}
  def get_media_check_details(connection, authorization, date, content_type, content_length, case_system_id, request, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/cases/#{case_system_id}/mediacheck/results")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckResultsResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve MediaCheck news articles content
  Retrieve MediaCheck news articles content and summary by the given caseSystemId and list of article IDs.  **Example HTTP request**  ```     {       \"articleIds\":[         \"articleID1\",         \"articleID2\",         \"articleID3\"       ]     } ``` 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for the Case
  - `request` (MediaCheckContentRequest): Request to retrieve MediaCheck new articles content.
  - `opts` (keyword): Optional parameters
    - `:enableHighlight` (boolean()): Flag to enable terms highlight
    - `:context` (String.t): Terms to highlight

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_results_content(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.MediaCheckContentRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse.t} | {:error, Tesla.Env.t}
  def get_media_check_results_content(connection, authorization, date, content_type, content_length, case_system_id, request, opts \\ []) do
    optional_params = %{
      :enableHighlight => :query,
      :context => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/cases/#{case_system_id}/mediacheck/results/content")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve mediacheck risk definitions
  Retrieves a list of mediacheck risk definitions. The mediacheck risk definitions are used when attaching mediacheck articles to a case. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_risks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def get_media_check_risks(connection, authorization, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mediacheck/risks")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve article metadata by the article ID
  Retrieve Media Check headlines results by the article ID. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for the Case
  - `article_id` (String.t): MediaCheck news article ID
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): A value that identifies UI language for request. The response will be provided in the selected UI language where available, otherwise it will be returned in English.

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_single_article_metadata(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t} | {:error, Tesla.Env.t}
  def get_media_check_single_article_metadata(connection, authorization, date, case_system_id, article_id, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/cases/#{case_system_id}/mediacheck/results/#{article_id}/metadata")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve smart filter on a case
  Retrieve the smart filter state on the case provided in the request path. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.SmartFilterResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_smart_filter(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, RefinitivWorldCheckOneAPI.Model.SmartFilterResponse.t} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_media_check_smart_filter(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.SmartFilterResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve content of single MediaCheck news article.
  Retrieve content of single MediaCheck news article by the given caseSystemId and article ID.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for the Case
  - `article_id` (String.t): MediaCheck news article ID
  - `opts` (keyword): Optional parameters
    - `:enableHighlight` (boolean()): Flag to enable terms highlight
    - `:context` (String.t): Terms to highlight

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_single_article_media_check_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse.t} | {:error, Tesla.Env.t}
  def get_single_article_media_check_content(connection, authorization, date, case_system_id, article_id, opts \\ []) do
    optional_params = %{
      :enableHighlight => :query,
      :context => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/cases/#{case_system_id}/mediacheck/results/#{article_id}/content")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckResultsContentResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve all articles attached to the case.
  Retrieve Media Check results by the article attached to the case.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for the Case.
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): A value that identifies UI language for request. The response will be provided in the selected UI language where available, otherwise it will be returned in English.

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_articles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t} | {:error, Tesla.Env.t}
  def retrieve_articles(connection, authorization, date, case_system_id, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/cases/#{case_system_id}/mediacheck/results/attach")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve MediaCheck article duplicates.
  Retrieve article duplicates by specifying article deduplicationHash. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `case_system_id` (String.t): System generated ID for a Case.
  - `deduplication_request` (MediaCheckDuplicatesRequest): Request containing data to retrieve article duplicates.
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): A value that identifies GUI language for the request. The response will be provided in the selected GUI language where available, otherwise it will be returned in English. Note this cannot be used to filter content by language and is used to display localized metadata.

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_media_check_duplicates(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.MediaCheckDuplicatesRequest.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse.t} | {:error, Tesla.Env.t}
  def retrieve_media_check_duplicates(connection, authorization, date, content_type, content_length, case_system_id, deduplication_request, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/cases/#{case_system_id}/mediacheck/results/duplicates")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, deduplication_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.MediaCheckArticlesMetadataResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Mark all MediaCheck news articles as reviewed for a case.
  Marks all news articles as reviewed for the Case identified by the given caseSystemId.

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for the Case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.ArticlesReviewDate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_articles_reviewed_date(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.ArticlesReviewDate.t} | {:error, Tesla.Env.t}
  def update_articles_reviewed_date(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cases/#{case_system_id}/mediacheck/results/review")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.ArticlesReviewDate{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end
end
