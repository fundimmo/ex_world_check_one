# NOTE: This file is auto generated by OpenAPI Generator 6.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule RefinitivWorldCheckOneAPI.Api.SmartFilter do
  @moduledoc """
  API calls for all endpoints tagged `SmartFilter`.
  """

  alias RefinitivWorldCheckOneAPI.Connection
  import RefinitivWorldCheckOneAPI.RequestBuilder

  @doc """
  Disable smart filter on a case
  Update the smart filter state on the case provided in the request path. The group setting \"Allow users to enable/disable the Smart Filter\" should be equal to true to have the ability to update the smart filter state on the case. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. If the smart filter has already disabled then the smart filter status will not be updated. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec disable_smart_filter_on_case(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def disable_smart_filter_on_case(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Enable smart filter on a case
  Update the smart filter state on the case provided in the request path. The group setting \"Allow users to enable/disable the Smart Filter\" should be equal to true to have the ability to update the smart filter state on the case. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. If the smart filter has already enabled then the smart filter status will not be updated. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec enable_smart_filter_on_case(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def enable_smart_filter_on_case(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Retrieve smart filter on a case
  Retrieve the smart filter state on the case provided in the request path. The request body should be empty for the case provided in the request path ('caseSystemId'). The case should be created with enabled mediacheck provider. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `case_system_id` (String.t): System generated ID for a case.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.SmartFilterResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_media_check_smart_filter(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, RefinitivWorldCheckOneAPI.Model.SmartFilterResponse.t} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_media_check_smart_filter(connection, authorization, date, case_system_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/cases/#{case_system_id}/mediacheck/smartFilter")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.SmartFilterResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end
end
