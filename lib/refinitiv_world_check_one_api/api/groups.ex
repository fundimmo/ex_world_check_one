# NOTE: This file is auto generated by OpenAPI Generator 6.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule RefinitivWorldCheckOneAPI.Api.Groups do
  @moduledoc """
  API calls for all endpoints tagged `Groups`.
  """

  alias RefinitivWorldCheckOneAPI.Connection
  import RefinitivWorldCheckOneAPI.RequestBuilder

  @doc """
  Get the CaseTemplate for the given Group
  Get the CaseTemplate for the given Group, used for constructing a Case  **Available secondary fields:** <details>   <summary>Click here to expand</summary>    | Type ID   | NAME                    | VALUE                     |   |-----------|-------------------------|---------------------------|   | SFCT_1    | GENDER                  | MALE, FEMALE, UNSPECIFIED |   | SFCT_2    | DATE OF BIRTH           | DATE                      |   | SFCT_3    | COUNTRY LOCATION        | COUNTRY CODE              |   | SFCT_4    | PLACE OF BIRTH          | COUNTRY CODE              |   | SFCT_5    | NATIONALITY             | COUNTRY CODE              |   | SFCT_6    | REGISTERED COUNTRY      | COUNTRY CODE              |   | SFCT_7    | IMO NUMBER              | TEXT                      |   | SFCT_8    | PASSPORT GIVEN NAMES    | TEXT                      |   | SFCT_9    | PASSPORT LAST NAME      | TEXT                      |   | SFCT_10   | PASSPORT GENDER         | MALE, FEMALE, UNSPECIFIED |   | SFCT_11   | PASSPORT ISSUING STATE  | STATE CODE                |   | SFCT_12   | PASSPORT NATIONALITY    | STATE CODE                |   | SFCT_13   | PASSPORT DATE OF BIRTH  | DATE                      |   | SFCT_14   | PASSPORT DOCUMENT TYPE  | PASSPORT, ID1, ID2        |   | SFCT_15   | PASSPORT ID NUMBER      | TEXT                      |   | SFCT_16   | PASSPORT DATE OF EXPIRY | DATE                      |   | SFCT_191  | DOCUMENT ID             | TEXT                      |   | SFCT_192  | DOCUMENT ID COUNTRY     | COUNTRY CODE              |   | SFCT_193  | DOCUMENT ID TYPE        | TEXT                      |  </details> 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `group_id` (String.t): Group ID under which we wish to manage Cases and perform screening
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.CaseTemplateResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_case_template_for_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, RefinitivWorldCheckOneAPI.Model.CaseTemplateResponse.t} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_case_template_for_group(connection, authorization, date, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/caseTemplate")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.CaseTemplateResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Get a specified group including its immediate descendants
  Get a specified group including its immediate descendants

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `group_id` (String.t): Group ID under which we wish to retrieve children groups
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.Group.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_by_id(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.Group.t} | {:error, Tesla.Env.t}
  def get_group_by_id(connection, authorization, date, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.Group{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Get all the top-level groups with their immediate descendants
  Get all the top-level groups with their immediate descendants

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Group{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Group.t)} | {:error, Tesla.Env.t}
  def get_groups(connection, authorization, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%RefinitivWorldCheckOneAPI.Model.Group{}]},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Get the ResolutionToolkit for the given Group.
  Get the ResolutionToolkit for the given Group, used to construct a valid resolution request(s) on the results for a Case belonging to the given Group `groupId`. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details).
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format.
  - `group_id` (String.t): ID of the Group to which the resolution toolkit belongs.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_resolution_toolkit_for_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse.t} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_resolution_toolkit_for_group(connection, authorization, date, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/resolutionToolkit")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Get the ResolutionToolkit for a specific provider type for the given Group
  Get the ResolutionToolkit for a specific provider type the given Group, used to construct a valid resolution request(s) on the results for a Case belonging to the given Group `groupId`. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `group_id` (String.t): ID of the Group to which the resolution toolkit belongs.
  - `provider_type` (String.t): Provider type for which the resolution toolkit applies.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_resolution_toolkit_for_group_with_provider_type(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse.t} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_resolution_toolkit_for_group_with_provider_type(connection, authorization, date, group_id, provider_type, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/resolutionToolkits/#{provider_type}")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %RefinitivWorldCheckOneAPI.Model.ResolutionToolkitResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Get all the ResolutionToolkits for the given Group
  Get the ResolutionToolkits for the given Group for all enabled provider types, used to construct a valid resolution request(s) on the results for a Case belonging to the given Group `groupId`. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `group_id` (String.t): ID of the Group to which the resolution toolkits belong.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_resolution_toolkits_for_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def get_resolution_toolkits_for_group(connection, authorization, date, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/resolutionToolkits")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end
end
