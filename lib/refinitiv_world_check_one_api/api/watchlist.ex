# NOTE: This file is auto generated by OpenAPI Generator 6.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule RefinitivWorldCheckOneAPI.Api.Watchlist do
  @moduledoc """
  API calls for all endpoints tagged `Watchlist`.
  """

  alias RefinitivWorldCheckOneAPI.Connection
  import RefinitivWorldCheckOneAPI.RequestBuilder

  @doc """
  Create or update a provider source
  Create or update a provider source for uploading entity records to. An example usage would be for a client watchlist. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `identifier` (String.t): Unique identifier for this provider source. Has to be alphanumeric.
  - `provider_source` (ProviderSource): Provider source details
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_or_update_provider_source(Tesla.Env.client, String.t, String.t, String.t, integer(), String.t, RefinitivWorldCheckOneAPI.Model.ProviderSource.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:error, Tesla.Env.t}
  def create_or_update_provider_source(connection, authorization, date, content_type, content_length, identifier, provider_source, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/reference/providers/sources/#{identifier}")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, provider_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end

  @doc """
  Maintain your Watchlist data
  Maintain your Watchlist data using the following supported entity actions.  * entityCreateOrUpdate - Add a new entity to your Watchlist or replace if it already exists.  * entityDelete - Mark the given entity as deleted in your Watchlist.  * entitySupersede - Supersede enables you to redirect matches against your superseded entity to a new entity. This is useful if you want to redirect users with existing matches against an old entity to a newer / more accurate version of those entities.  * entityPurge - Purge enables you to remove an entity as required by GDPR whereby the personally identifiable information is removed.  Due to the large number of entries within a Watchlist it is not possible to update the entire Watchlist in a single request The overall request must be split into blocks of up to 500 individual entity actions.   The response consists of a list of any entities which were not successfully processed and a reason for failure. 

  ### Parameters

  - `connection` (RefinitivWorldCheckOneAPI.Connection): Connection to server
  - `authorization` (String.t): The authorization credentials including 'keyId', 'algorithm', 'headers', 'signature' (see 'Security and Authentication details' documentation section for more details)
  - `date` (String.t): The date and time at which the message was originated in 'RFC 1123' format
  - `content_type` (String.t): The media type of the request (e.g., 'application/json')
  - `content_length` (integer()): The length of the request body in octets (8-bit bytes)
  - `watchlist_data_set` (WatchlistDataSet): A collection of maintenance actions to be performed on your Watchlist.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, RefinitivWorldCheckOneAPI.Model.WatchlistResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec save_watchlist(Tesla.Env.client, String.t, String.t, String.t, integer(), RefinitivWorldCheckOneAPI.Model.WatchlistDataSet.t, keyword()) :: {:ok, nil} | {:ok, list(RefinitivWorldCheckOneAPI.Model.Error.t)} | {:ok, RefinitivWorldCheckOneAPI.Model.WatchlistResponse.t} | {:error, Tesla.Env.t}
  def save_watchlist(connection, authorization, date, content_type, content_length, watchlist_data_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/reference/watchlist")
      |> add_param(:headers, :Authorization, authorization)
      |> add_param(:headers, :Date, date)
      |> add_param(:headers, :"Content-Type", content_type)
      |> add_param(:headers, :"Content-Length", content_length)
      |> add_param(:body, :body, watchlist_data_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, %RefinitivWorldCheckOneAPI.Model.WatchlistResponse{}},
      {400, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {401, false},
      {404, [%RefinitivWorldCheckOneAPI.Model.Error{}]},
      {415, false},
      {429, false},
      {500, [%RefinitivWorldCheckOneAPI.Model.Error{}]}
    ])
  end
end
